# ========================================
# Rust Axum API - Base Configuration
# ========================================
# This file contains base configuration values for development.
# Create .env.local for personal overrides (gitignored).
# Create .env.production for production-specific settings (gitignored).
#
# Priority: System Variables > .env.local/.env.production > .env (base)

# ========================================
# Application Environment
# ========================================
# Determines which environment the application is running in
# Valid values: development, staging, production
ENVIRONMENT=development

# ========================================
# Server Configuration
# ========================================
# The host/IP address the server will bind to
# Use 127.0.0.1 for localhost only, 0.0.0.0 for all interfaces
HOST=127.0.0.1

# The port number the server will listen on
# Common values: 3000 (development), 8080 (alternative), 80/443 (production)
PORT=3000

# The protocol used for building URLs and responses
# Valid values: http, https
PROTOCOL=http

# ========================================
# Request Configuration
# ========================================
# Maximum allowed size for request bodies in bytes
# Current: 2MB (2097152 bytes)
# Common values: 1048576 (1MB), 5242880 (5MB), 10485760 (10MB)
MAX_REQUEST_BODY_SIZE=2097152

# Default timeout for requests in seconds
# Requests exceeding this time will return a 408 Request Timeout
# Current: 4 seconds (quite short - consider increasing for production)
DEFAULT_TIMEOUT_SECONDS=4

# ========================================
# Database Configuration
# ========================================
# PostgreSQL database connection settings
# These are development defaults - override in .env.local or .env.production

# Database host/server address
DB_HOST=localhost

# Database port number (PostgreSQL default is 5432)
DB_PORT=5432

# Database name 
DB_NAME=rust_axum_api

# Database username
DB_USER=postgres

# Database password
# WARNING: Change this in production! Use .env.production for secure passwords
DB_PASSWORD=postgres